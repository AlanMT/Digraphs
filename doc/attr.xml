#############################################################################
##
#W  attr.xml
#Y  Copyright (C) 2014                                  James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="DirectedGraphTopologicalSort">
<ManSection>
  <Attr Name="DirectedGraphTopologicalSort" Arg="digraph"/>
  <Returns>A list of positive integers, or <K>fail</K>.</Returns>
  <Description>
    If <A>digraph</A> is a directed graph with no cycles of length greater than
    <M>1</M>, then this operation returns the vertices of <A>digraph</A> 
    ordered so that every vertex adjacent to <C>i</C> occurs before <C>i</C>. 
    If the directed graph <A>digraph</A> contains cycles of length greater than 
    <M>1</M>, then this operation returns <K>fail</K>.
    <P/>

    The method used in this operation has complexity <M>O(m+n)</M> where
    <M>m</M> is the number of edges (counting multiple edges as one) and
    <M>n</M> is the number of vertices in the directed graph. 
    <Example><![CDATA[
gap> gr:=DirectedGraph([[2,3], [],[4,6], [5], [], [7,8,9], [],[],[]]);
<directed graph with 9 vertices, 8 edges>
gap> DirectedGraphTopologicalSort(gr);
[ 2, 5, 4, 7, 8, 9, 6, 3, 1 ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="AdjacencyMatrix">
<ManSection>
  <Attr Name="AdjacencyMatrix" Arg="digraph"/>
  <Returns>The adjacency matrix of a directed graph.</Returns>
  <Description>
    Returns adjacency matrix <C>mat</C> of the directed graph <A>digraph</A>.
    The value of <C>mat[i][j]</C> is the number of edges from the vertex
    <C>i</C> to the vertex <C>j</C> in <A>digraph</A>.
    
    <Example><![CDATA[
gap> gr:=DirectedGraph( [ [ 2 ], [ 1, 3, 6, 8, 9, 10 ], [ 4, 6, 8 ], 
> [ 1, 2, 3, 9 ], [ 3 ], [ 3, 5, 6, 10 ], 
> [ 1, 2, 7 ], [ 1, 2, 3, 5, 6, 10 ], [ 1, 3, 4, 5, 8, 10 ], 
> [ 2, 3, 4, 6, 7, 10 ] ] );;
gap> AdjacencyMatrix(gr);
[ [ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 0, 1, 0, 0, 1, 0, 1, 1, 1 ], 
  [ 0, 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 1, 1, 1, 0, 0, 0, 0, 0, 1, 0 ], 
  [ 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 1, 0, 1, 1, 0, 0, 0, 1 ], 
  [ 1, 1, 0, 0, 0, 0, 1, 0, 0, 0 ], [ 1, 1, 1, 0, 1, 1, 0, 0, 0, 1 ], 
  [ 1, 0, 1, 1, 1, 0, 0, 1, 0, 1 ], [ 0, 1, 1, 1, 0, 1, 1, 0, 0, 1 ] ]]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="RangeSourceDigraph">
<ManSection>
  <Attr Name="Range" Arg="digraph"/>
  <Attr Name="Source" Arg="digraph"/>
  <Returns>A list of positive integers.</Returns>
  <Description>
    <C>Range</C> and <C>Source</C> return the range and source of the directed
    graph <A>digraph</A>. More precisely, position <C>i</C> in
    <C>Range(<A>digraph</A>)</C> is the range of the <C>i</C>th edge of
    <A>digraph</A>. 

    <Example><![CDATA[
gap> gr:=DirectedGraph( [ [ 1, 2, 3, 5 ], [ 1, 3, 4 ], [ 2, 3 ], 
> [ 2 ], [ 1, 2, 3, 4 ] ] );
<directed graph with 5 vertices, 14 edges>
gap> Range(gr);
[ 1, 2, 3, 5, 1, 3, 4, 2, 3, 2, 1, 2, 3, 4 ]
gap> Source(gr);
[ 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 5, 5 ]
gap> Edges(gr);
[ [ 1, 1 ], [ 1, 2 ], [ 1, 3 ], [ 1, 5 ], [ 2, 1 ], [ 2, 3 ], 
  [ 2, 4 ], [ 3, 2 ], [ 3, 3 ], [ 4, 2 ], [ 5, 1 ], [ 5, 2 ], 
  [ 5, 3 ], [ 5, 4 ] ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="Edges">
<ManSection>
  <Attr Name="Edges" Arg="digraph"/>
  <Returns>The edges of a directed graph.</Returns>
  <Description>
    Returns the set of edges of the directed graph <A>digraph</A>, that is, a set of
    pairs of elements of <Ref Oper="Vertices"/>.
    <Example><![CDATA[
gap> gr:= DirectedGraph( [ [ 1, 3, 4, 5 ], [ 1, 2, 3, 5 ], [ 2, 4, 5 ], 
> [ 2, 4, 5 ], [ 1 ] ] );
<directed graph with 5 vertices, 15 edges>
gap> Edges(gr);
[ [ 1, 1 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 2, 1 ], [ 2, 2 ], 
  [ 2, 3 ], [ 2, 5 ], [ 3, 2 ], [ 3, 4 ], [ 3, 5 ], [ 4, 2 ], 
  [ 4, 4 ], [ 4, 5 ], [ 5, 1 ] ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="NrEdges">
<ManSection>
  <Attr Name="NrEdges" Arg="digraph"/>
  <Returns>The number of edges of a directed graph.</Returns>
  <Description>
    Returns the number of edges of the directed graph <A>digraph</A>.
    <Example><![CDATA[
gap> gr:= DirectedGraph( [ [ 1, 3, 4, 5 ], [ 1, 2, 3, 5 ], [ 2, 4, 5 ], 
> [ 2, 4, 5 ], [ 1 ] ] );;
gap> NrEdges(gr);
15
gap> gr:=DirectedGraph(rec(vertices:=["a", "b", "c"],
> source:=["a", "b", "b"], range:=["b", "a", "a"]));
<directed graph with 3 vertices, 3 edges>
gap> NrEdges(gr);
3]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="Adjacencies">
<ManSection>
  <Attr Name="Adjacencies" Arg="digraph"/>
  <Returns>The adjacencies of a directed graph.</Returns>
  <Description>
    Returns the list <C>adj</C> of adjacencies of the directed graph
    <A>digraph</A>. More specifically, <C>j</C> belongs to <C>adj[i]</C>
    whenever there is an edge from <C>i</C> to <C>j</C> in <A>digraph</A>. <P/>

    A <A>digraph</A> is a simple directed graph if and only if it is defined by
    its adjacencies. 

    <Example><![CDATA[
gap> gr:=DirectedGraph(rec(vertices:=["a", "b", "c"],
> source:=["a", "b", "b"], range:=["b", "a", "c"]));
<directed graph with 3 vertices, 3 edges>
gap> Adjacencies(gr);
[ [ 2 ], [ 1, 3 ], [  ] ]
gap> gr:=DirectedGraph(rec(vertices:=[1..3], 
> source:=[1,2,3,1,1,2], range:=[1,2,3,2,3,1]));
<directed graph with 3 vertices, 6 edges>
gap> Adjacencies(gr);
[ [ 1, 2, 3 ], [ 1, 2 ], [ 3 ] ]
gap> gr:=DirectedGraph(rec(vertices:=[1..3],
> source:=[1,2,3,1,1,2,1], range:=[1,2,3,2,3,1,2]));
<directed graph with 3 vertices, 7 edges>
gap> Adjacencies(gr);
[ [ 1, 2, 3 ], [ 1, 2 ], [ 3 ] ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="Vertices">
<ManSection>
  <Oper Name="Vertices" Arg="digraph"/>
  <Returns>The vertices of a directed graph.</Returns>
  <Description>
    Returns the vertices of the directed graph <A>digraph</A>. <P/>

    <B>Note that:</B> the vertices of a directed graph are always a range of
    positive integers from <C>1</C> to the number of vertices of the graph. 
    <Example><![CDATA[
gap> gr:=DirectedGraph(rec(vertices:=["a", "b", "c"],
> source:=["a", "b", "b"], range:=["b", "c", "a"]));
<directed graph with 3 vertices, 3 edges>
gap> Vertices(gr);
[ 1 .. 3 ]
gap> gr:=DirectedGraph(rec(vertices:=[1,2,3,4,5,7],
> source:=[1,2,2,4,4], range:=[2,3,5,3,5]));
<directed graph with 6 vertices, 5 edges>
gap> Vertices(gr);
[ 1 .. 6 ]
gap> Vertices(RandomSimpleDirectedGraph(100));
[ 1 .. 100 ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="NrVertices">
<ManSection>
  <Oper Name="NrVertices" Arg="digraph"/>
  <Returns>The number of vertices of a directed graph.</Returns>
  <Description>
    Returns the number of vertices of the directed graph <A>digraph</A>. <P/>

    <Example><![CDATA[
gap> gr:=DirectedGraph(rec(vertices:=["a", "b", "c"],
> source:=["a", "b", "b"], range:=["b", "c", "a"]));
<directed graph with 3 vertices, 3 edges>
gap> NrVertices(gr);
3
gap> gr:=DirectedGraph(rec(vertices:=[1,2,3,4,5,7],
> source:=[1,2,2,4,4], range:=[2,3,5,3,5]));
<directed graph with 6 vertices, 5 edges>
gap> NrVertices(gr);
6
gap> NrVertices(RandomSimpleDirectedGraph(100));
100]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="StronglyConnectedComponents">
<ManSection>
  <Oper Name="StronglyConnectedComponents" Arg="digraph"/>
  <Returns>A record.</Returns>
  <Description>
    Returns the record <C>scc</C> corresponding to the strongly connected
    components of the directed graph <A>digraph</A>. The record <C>scc</C> has 2
    components <C>comps</C> and <C>id</C>. The component <C>comps</C> is a list
    of the strongly connected components of <A>digraph</A> (as a list of
    vertices) and <C>id</C> is a list such that the vertex <C>i</C> is an
    element of <C>comps[id[i]]</C>.<P/>

    The method used in this operation is a non-recursive version of Gabow's
    Algorithm <Cite Key="Gabow2000aa"/> and has complexity <M>O(m+n)</M> where
    <M>m</M> is the number of edges (counting multiple edges as one) and
    <M>n</M> is the number of vertices in the directed graph. 
    
    <Example><![CDATA[
gap> gr:=DirectedGraph(rec(vertices:=["a", "b", "c"],
> source:=["a", "b", "b"], range:=["b", "c", "a"]));
<directed graph with 3 vertices, 3 edges>
gap> StronglyConnectedComponents(gr);
rec( comps := [ [ 3 ], [ 1, 2 ] ], id := [ 2, 2, 1 ] )
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>
