#############################################################################
##
#W  io.xml
#Y  Copyright (C) 2014                                  James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="DigraphFromGraph6String">
<ManSection>
  <Oper Name="DigraphFromGraph6String" Arg="str"/>
  <Oper Name="DigraphFromDigraph6String" Arg="str"/>
  <Oper Name="DigraphFromSparse6String" Arg="str"/>
  <Oper Name="DigraphFromDiSparse6String" Arg="str"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>str</A> is a string encoding a graph in Graph6, Digraph6, Sparse6 or
    DiSparse6 format, then the corresponging function returns a digraph. In the
    case of either Graph6 or Sparse6, formats which do not support directed
    edges, this will be a digraph such that for every edge, the edge going in
    the opposite direction is also present.
    <Example><![CDATA[
gap> DigraphFromGraph6String("?");
<digraph with 0 vertices, 0 edges>
gap> DigraphFromGraph6String("C]");
<digraph with 4 vertices, 8 edges>
gap> DigraphFromGraph6String("H?AAEM{");
<digraph with 9 vertices, 22 edges>
gap> DigraphFromDigraph6String("+?");
<digraph with 0 vertices, 0 edges>
gap> DigraphFromDigraph6String("+CQFG");
<digraph with 4 vertices, 6 edges>
gap> DigraphFromDigraph6String("+IM[SrKLc~lhesbU[F_");
<digraph with 10 vertices, 51 edges>
gap> DigraphFromDiSparse6String(".CaWBGA?b");
<multidigraph with 4 vertices, 9 edges>
]]></Example>
    </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="ReadDigraphs">
<ManSection>
  <Oper Name="ReadDigraphs" Arg="filename[, nr]"/>
  <Returns>A list of digraphs.</Returns>
  <Description>
    If <A>filename</A> is the name of a file containing digraphs, then 
    <C>ReadDigraphs</C> returns these digraphs as a list.<P/>
    
    If the optional argument <A>nr</A> is specified, the function
    return the graph encoded in the <A>nr</A>th line of the file
    <A>filename</A>.

    The currently supported file formats are:
    <List>
      <Mark>graph6 (.g6)</Mark>
      <Item>
	A standard and widely-used format for undirected graphs, with no support
	for loops or multiple edges.  Only symmetric graphs are allowed -- each
	edge is combined with its converse edge to produce a single undirected
	edge.  This format is best used for "dense" graphs -- those with many
	edges per vertex.
      </Item>
      <Mark>sparse6 (.s6)</Mark>
      <Item>
	Unlike graph6, sparse6 has support for loops and multiple edges.
	However, its use is still limited to symmetric graphs.  This format is
	better-suited to "sparse" graphs -- those with few edges per vertex.
      </Item>
      <Mark>digraph6 (.d6)</Mark>
      <Item>
	This format is based on graph6, but stores direction information -
	therefore is not limited to symmetric graphs.  Loops are allowed, but
	multiple edges are not.  Best compression with "dense" graphs.
      </Item>
      <Mark>disparse6 (.ds6)</Mark>
      <Item>
	Any type of digraph can be encoded in disparse6: directions, loops, and
	multiple edges are all allowed.  Similar to sparse6, this has the best
	compression rate with "sparse" graphs.
      </Item>
      <Mark>plain text (.txt)</Mark>
      <Item>
        <A>filename</A> should be a plain text file containing lines of the form 
        <C>0 7  0 8  1 7  2 8  3 8  4 8  5 8  6 8</C> i.e. pairs of vertices
        describing edges in a graph. More specifically, the vertices making up
        one edge must be separated by a single space, and pairs of vertices must
        be separated by two spaces. <P/>

        See <Ref Func="ReadPlainTextDigraph"/> for a more flexible way to read
        digraphs in a plain text file. <P/>

        Just so I remember:
        <C>ReadPlainTextDigraph("data-local/soc-Epinions1.txt.gz", "\t", 1, '#');</C>
      </Item>
    </List>
    
    <Example><![CDATA[
gap> ReadDigraphs(
> Concatenation(DigraphsDir(), "/data/graph5.g6"), 10);
<digraph with 5 vertices, 8 edges>
gap> ReadDigraphs(
> Concatenation(DigraphsDir(), "/data/graph5.g6"), 17);
<digraph with 5 vertices, 12 edges>
gap> ReadDigraphs(
> Concatenation(DigraphsDir(), "/data/tree9.4.txt"));
[ <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges> ]]]></Example>
    </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="WriteDigraphs">
<ManSection>
  <Oper Name="WriteDigraphs" Arg="filename, digraphs"/>
  <Description>
    If <A>digraphs</A> is a list of digraphs, then <C>WriteDigraphs</C> writes
    its contents to a file in a compact format.  If the supplied filename ends
    in one of the extensions <E>gz</E>, <E>xz</E>, or <E>bzip2</E>, the file
    will be compressed appropriately.  Excluding these extensions, if the file
    ends with an extension in the list below, the corresponding graph format
    will be used to encode it.  If such an extension is not included, an
    appropriate format will be chosen intelligently, and an extension appended,
    to minimise file length.

    The currently supported file formats are:
    <List>
      <Mark>graph6 (.g6)</Mark>
      <Item>
	A standard and widely-used format for undirected graphs, with no support
	for loops or multiple edges.  Only symmetric graphs are allowed -- each
	edge is combined with its converse edge to produce a single undirected
	edge.  This format is best used for "dense" graphs -- those with many
	edges per vertex.
      </Item>
      <Mark>sparse6 (.s6)</Mark>
      <Item>
	Unlike graph6, sparse6 has support for loops and multiple edges.
	However, its use is still limited to symmetric graphs.  This format is
	better-suited to "sparse" graphs -- those with few edges per vertex.
      </Item>
      <Mark>digraph6 (.d6)</Mark>
      <Item>
	This format is based on graph6, but stores direction information -
	therefore is not limited to symmetric graphs.  Loops are allowed, but
	multiple edges are not.  Best compression with "dense" graphs.
      </Item>
      <Mark>disparse6 (.ds6)</Mark>
      <Item>
	Any type of digraph can be encoded in disparse6: directions, loops, and
	multiple edges are all allowed.  Similar to sparse6, this has the best
	compression rate with "sparse" graphs.
      </Item>
<!--
      <Mark>plain text</Mark>
      <Item>
        <A>filename</A> should be a plain text file containing lines of the form
        <C>0 7  0 8  1 7  2 8  3 8  4 8  5 8  6 8</C> i.e. pairs of vertices
        describing edges in a graph. More specifically, the vertices making up
        one edge must be separated by a single space, and pairs of vertices must
        be separated by two spaces. <P/>

        See <Ref Func="ReadPlainTextDigraph"/> for a more flexible way to read
        digraphs in a plain text file. <P/>

        Just so I remember:
        <C>ReadPlainTextDigraph("data-local/soc-Epinions1.txt.gz", "\t", 1, '#');</C>
      </Item>
-->
    </List>
    
    <Example><![CDATA[
gap> grs := [];;
gap> grs[1] := Digraph( [ ] );;
gap> grs[2] := Digraph( [ [ 1, 3 ], [ 2 ], [ 1, 2 ] ] );;
gap> grs[3] := Digraph( [ [ 6, 7 ], [ 6, 9 ], [ 1, 3, 4, 5, 8, 9 ],
> [ 1, 2, 3, 4, 5, 6, 7, 10 ], [ 1, 5, 6, 7, 10 ], [ 2, 4, 5, 9, 10 ],
> [ 3, 4, 5, 6, 7, 8, 9, 10 ], [ 1, 3, 5, 7, 8, 9 ], [ 1, 2, 5 ],
> [ 1, 2, 4, 6, 7, 8 ] ] );;
gap> filename := Concatenation(DigraphsDir(), "/tst/out/man.d6.gz");;
gap> WriteDigraphs(filename, grs);
gap> ReadDigraphs(filename);
[ <digraph with 0 vertices, 0 edges>, 
  <digraph with 3 vertices, 5 edges>, 
  <digraph with 10 vertices, 51 edges> ]]]></Example>
    </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="WriteGraph6">
<ManSection>
  <Oper Name="Graph6String" Arg="digraph"/>
  <Oper Name="Digraph6String" Arg="digraph"/>
  <Oper Name="Sparse6String" Arg="digraph"/>
  <Oper Name="DiSparse6String" Arg="digraph"/>
  <Returns>A string.</Returns>
  <Description>
    These four functions return a highly compressed string fully describing the
    <A> digraph </A>. <P/>

    Graph6 and Digraph6 are formats best used on small, dense graphs, if
    applicable. For larger, sparse graphs use <E>Sparse6</E> and
    <E>Disparse6</E> (this latter also preserves multiple edges).
    <Example><![CDATA[
gap> gr := Digraph([[2,3], [1], [1]]);
<digraph with 3 vertices, 4 edges>
gap> Sparse6String(gr);
":Bc"
gap> DiSparse6String(gr);
".Bc{f"
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="ReadPlainTextDigraph">
<ManSection>
  <Func Name="ReadPlainTextDigraph" Arg="?"/>
  <Returns>?.</Returns>
  <Description>
  ?
  <Example><![CDATA[
gap> 5 + 1;
6
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

