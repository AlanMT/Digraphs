#############################################################################
##
#W  io.xml
#Y  Copyright (C) 2014                                  James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="ReadGraph6Line">
<ManSection>
  <Oper Name="ReadGraph6Line" Arg="str"/>
  <Oper Name="ReadDigraph6Line" Arg="str"/>
  <Oper Name="ReadSparse6Line" Arg="str"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>str</A> is a string encoding a graph in Graph6, Digraph6 or
    Sparse6, then this function returns a digraph. In the case of
    either Graph6 or Sparse6, formats which do not support directed edges,
    this will be a digraph such that for every edge, the edge going
    in the opposite direction is also present.
    <Example><![CDATA[
gap> ReadGraph6Line("?");
<digraph with 0 vertices, 0 edges>
gap> ReadGraph6Line("C]");
<digraph with 4 vertices, 8 edges>
gap> ReadGraph6Line("H?AAEM{");
<digraph with 9 vertices, 22 edges>
gap> ReadDigraph6Line("+?");
<digraph with 0 vertices, 0 edges>
gap> ReadDigraph6Line("+CQFG");
<digraph with 4 vertices, 6 edges>
gap> ReadDigraph6Line("+IM[SrKLc~lhesbU[F_");
<digraph with 10 vertices, 51 edges>
]]></Example>
    </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="ReadDigraphs">
<ManSection>
  <Oper Name="ReadDigraphs" Arg="filename[, nr]"/>
  <Returns>A list of digraphs.</Returns>
  <Description>
    If <A>filename</A> is the name of a file containing digraphs, then 
    <C>ReadDigraphs</C> returns these digraphs as a list.<P/>
    
    If the optional argument <A>nr</A> is specified, the function
    return the graph encoded in the <A>nr</A>th line of the file
    <A>filename</A>.

    The currently supported file formats are:
    <List>
      <Mark>graph6</Mark>
      <Item>
        Say something.
      </Item>
      <Mark>digraph6</Mark>
      <Item>
        Say something.
      </Item>
      <Mark>plain text</Mark>
      <Item>
        <A>filename</A> should be a plain text file containing lines of the form 
        <C>0 7  0 8  1 7  2 8  3 8  4 8  5 8  6 8</C> i.e. pairs of vertices
        describing edges in a graph. More specifically, the vertices making up
        one edge must be separated by a single space, and pairs of vertices must
        be separated by two spaces. <P/>

        See <Ref Func="ReadPlainTextDigraph"/> for a more flexible way to read
        digraphs in a plain text file. <P/>

        Just so I remember:
        <C>ReadPlainTextDigraph("data-local/soc-Epinions1.txt.gz", "\t", 1, '#');</C>
      </Item>
    </List>
    
    <Example><![CDATA[
gap> ReadDigraphs(
> Concatenation(DigraphsDir(), "/data/graph5.g6"), 10);
<digraph with 5 vertices, 8 edges>
gap> ReadDigraphs(
> Concatenation(DigraphsDir(), "/data/graph5.g6"), 17);
<digraph with 5 vertices, 12 edges>
gap> ReadDigraphs("pkg/digraphs/data/tree9.4.txt");
[ <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges>, 
  <digraph with 9 vertices, 8 edges> ]]]></Example>
    </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="WriteGraph6">
<ManSection>
  <Oper Name="WriteGraph6" Arg="digraph"/>
  <Oper Name="WriteDigraph6" Arg="digraph"/>
  <Returns>A string.</Returns>
  <Description>
    These two functions return a highly compressed string describing the
    adjacencies of <A>digraph</A>, in either the Graph6 or Digraph6 format.<P/>

    <E>Graph6</E> is a widely used format for storing <E>undirected</E> graphs.
    The upper triangle of an adjacency matrix for <A>digraph</A> is recorded,
    six bits at a time, into a string of printable characters in the ASCII range
    63-126.  Single-vertex loops are removed, directions are forgotten, and
    multiple edges are reduced to single edges.<P/>

    <E>Digraph6</E> is a new format based on Graph6, but designed for directed
    graphs.  The entire adjacency matrix is stored, and therefore there is
    support for directed edges and single-vertex loops.  However, multiple edges
    are still reduced to single edges.<P/>

    These two formats are best used on small, dense graphs.  For larger, sparse
    graphs use <E>Sparse6</E> and <E>Disparse6</E> (this latter also preserves
    multiple edges).

    <Example><![CDATA[
gap> gr := Digraph([[1,2,4], [1], [2,4], [3,4]]);
<digraph with 4 vertices, 8 edges>
gap> WriteGraph6(gr);
"Cl"
gap> WriteDigraph6(gr);
"+Cq`k"
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>
