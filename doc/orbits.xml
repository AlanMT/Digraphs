#############################################################################
##
#W  orbits.xml
#Y  Copyright (C) 2016                                       Jan De Beule
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="DigraphGroup">
<ManSection>
  <Attr Name="DigraphGroup" Arg="digraph"/>
  <Returns>A permutation group</Returns>
  <Description>
    Let <A>digraph</A> be a digraph. If <A>digraph</A> has been constructed
    using a permutation group <C>G</C>, a list of vertices, an action function
    and an adjacency function (see <Ref Oper="Digraph"/>) then
    <C>DigraphGroup</C> is set upon construction of <A>digraph</A> as the action
    of <C>G</C> on the set of vertices. <P/>

    Note that constructor operations, e.g.  <Ref Oper="CayleyDigraph"/>, <Ref
    Oper="BipartiteDoubleDigraph"/>, and <Ref Oper="DoubleDigraph"/>, may not
    require a group as one of the arguments, but use the standard constructor
    method using a group, and hence set the <C>DigraphGroup</C> attribute for
    the resulting digraph.  If <C>DigraphGroup</C> has not been set or
    calculated yet, then <Ref Attr="AutomorphismGroup" Label="for a digraph"/>
    is used. Note that for large digraphs, this might require a lengthy
    computation.

    <Example><![CDATA[
gap> n := 4;;
gap> adj := function(x, y)
>      return (((x-y) mod n) = 1) or (((x-y) mod n) = n-1);
>    end;;
gap> group := CyclicGroup(IsPermGroup, n);
Group([ (1,2,3,4) ])
gap> digraph := Digraph(group, [1..n], \^, adj);
<digraph with 4 vertices, 8 edges>
gap> HasDigraphGroup(digraph);
true
gap> DigraphGroup(digraph);
Group([ (1,2,3,4) ])
gap> AutomorphismGroup(digraph);
Group([ (2,4), (1,2,3,4) ])
gap> ddigraph := DoubleDigraph(digraph);
<digraph with 8 vertices, 32 edges>
gap> HasDigraphGroup(ddigraph);
true
gap> DigraphGroup(ddigraph);
Group([ (1,2,3,4)(5,6,7,8), (1,5)(2,6)(3,7)(4,8) ])
gap> AutomorphismGroup(ddigraph);
Group([ (6,8), (5,7), (4,6), (3,5), (2,4), (1,2,3,4)(5,6)(7,8) ])
gap> digraph := Digraph([[2, 3], [], []]);
<digraph with 3 vertices, 2 edges>
gap> HasDigraphGroup(digraph);
false
gap> HasAutomorphismGroup(digraph);
false
gap> DigraphGroup(digraph);
Group([ (2,3) ])
gap> HasAutomorphismGroup(digraph);
true
gap> group := DihedralGroup(8);
<pc group of size 8 with 3 generators>
gap> digraph := CayleyDigraph(group);
<digraph with 8 vertices, 24 edges>
gap> HasDigraphGroup(digraph);
true
gap> DigraphGroup(digraph);
Group([ (1,2)(3,8)(4,6)(5,7), (1,3,4,7)(2,5,6,8), (1,4)(2,6)(3,7)
(5,8) ])
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>
